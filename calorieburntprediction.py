# -*- coding: utf-8 -*-
"""CalorieBurntPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1anyBrw2yAX67v2IkHpN_HM-LwB7uCcgv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

calories = pd.read_csv('/calories.csv')

calories.head()

exercise_data = pd.read_csv('/exercise.csv')

exercise_data.head()

calories_data = pd.concat([exercise_data, calories['Calories']], axis=1)

np.random.seed(42)
missing_percentage = 0.1
mask = np.random.rand(*calories_data.shape) < missing_percentage
calories_data[mask] = np.nan
print(calories_data)

calories_data.head()

calories_data.shape

calories_data.info()

calories_data.isnull().sum()

numeric_cols = calories_data.select_dtypes(include=[np.number])
column_means = numeric_cols.mean()

calories_data[numeric_cols.columns] = numeric_cols.fillna(column_means)

# Display the DataFrame with NaN values filled with the mean
print(calories_data)

calories_data.isnull().sum()

calories_data.describe()

sns.set()

# Fill NaN values in 'Gender' with the mode before conversion
mode_gender = calories_data['Gender'].mode()[0]
calories_data['Gender'].fillna(mode_gender, inplace=True)

calories_data['Gender'] = calories_data['Gender'].astype('category')

sns.countplot(x='Gender', data=calories_data)

plt.show()

sns.distplot(calories_data['Age'])

# finding the distribution of "Height" column
sns.distplot(calories_data['Height'])

sns.distplot(calories_data['Weight'])

age_intervals = [10,20, 30, 40, 50, 60, 70, 80]  # Specify the intervals you want
plt.hist(calories_data['Age'], bins=age_intervals, edgecolor='black',color='green')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Histogram of Age with Specified Intervals')
plt.show()

weight_intervals = [40,60,80,100,120]  # Specify the intervals you want
plt.hist(calories_data['Weight'], bins=weight_intervals, edgecolor='black')
plt.xlabel('Weight')
plt.ylabel('Frequency')
plt.title('Histogram of Weight with Specified Intervals')
plt.show()

height_intervals = [120,140,160,180,200,220]  # Specify the intervals you want
plt.hist(calories_data['Height'], bins=height_intervals, edgecolor='black',color='red')
plt.xlabel('Height')
plt.ylabel('Frequency')
plt.title('Histogram of height with Specified Intervals')
plt.show()

calories_data.head(10)

age_groups = ['0-20 yrs', '21-30 yrs', '31-40 yrs', '41-50 yrs', '51-60 yrs', '61-70 yrs', '71 and above yrs']  # Specify the intervals you want
calories_data_age = calories_data
calories_data_age['age_group'] = pd.cut(calories_data['Age'], bins=[0, 20, 30, 40, 50, 60, 70, float('inf')],
                                    labels=age_groups, right=False)
age_group_counts = calories_data_age['age_group'].value_counts()
plt.pie(age_group_counts, labels=age_group_counts.index, autopct='%1.1f%%', startangle=90, colors=plt.cm.Set3.colors)
plt.title('Pie Chart of Age Groups')
plt.show()

plt.title('Scatter Plot of Heart_Rate vs Calories')
plt.xlabel('Heart_Rate')
plt.ylabel('Calories')
sampled_data = calories_data.sample(frac=0.1)
plt.scatter(sampled_data['Heart_Rate'], sampled_data['Calories'], alpha=0.5)
plt.show()

plt.title('Scatter Plot of Age vs Calories')
plt.xlabel('Age')
plt.ylabel('Calories')
sampled_data = calories_data.sample(frac=0.1)
plt.scatter(sampled_data['Age'], sampled_data['Calories'], alpha=0.5, c='red')
plt.show()

plt.title('Scatter Plot of Duration vs Calories')
plt.xlabel('Duration')
plt.ylabel('Calories')
sampled_data = calories_data.sample(frac=0.1)
plt.scatter(sampled_data['Duration'], sampled_data['Calories'], alpha=0.5, c='blue')
plt.show()

plt.title('Scatter Plot of Weight vs Calories')
plt.xlabel('Weight')
plt.ylabel('Calories')
sampled_data = calories_data.sample(frac=0.1)
plt.scatter(sampled_data['Weight'], sampled_data['Calories'], alpha=0.5, c='green')
plt.show()

calories_data['Gender'] = calories_data['Gender'].map({'male': 0, 'female': 1})

calories_data.head(70)
calories_data=calories_data.drop('age_group',axis=1)

correlation = calories_data.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

correlation_matrix = calories_data.corr()
columns_to_drop = ['Weight']
calories_data_filled_filtered = calories_data.drop(columns=columns_to_drop, axis=1)

correlation2=calories_data_filled_filtered.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation2, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

X = calories_data_filled_filtered.drop(columns=['User_ID','Calories'], axis=1)
Y = calories_data['Calories']

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

model = XGBRegressor()

# Ensure Gender column is numerical before training
X_train['Gender'] = X_train['Gender'].astype(int)
model.fit(X_train, Y_train)

test_data_prediction = model.predict(X_test)

print(test_data_prediction)

mae = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("Mean Absolute Error = ", mae)

